#include <smfp/channel_state.hpp>

namespace smfp {
  std::string to_string( channel_variable_id_t v ) {
    if( v == channel_variable_id_t::bank ) return "bank";
    else if( v == channel_variable_id_t::modulation ) return "modulation";
    else if( v == channel_variable_id_t::breath ) return "breath";
    else if( v == channel_variable_id_t::foot ) return "foot";
    else if( v == channel_variable_id_t::portamento_time ) return "portamento_time";
    else if( v == channel_variable_id_t::data_entry ) return "data_entry";
    else if( v == channel_variable_id_t::volume ) return "volume";
    else if( v == channel_variable_id_t::balance ) return "balance";
    else if( v == channel_variable_id_t::pan ) return "pan";
    else if( v == channel_variable_id_t::expression ) return "expression";
    else if( v == channel_variable_id_t::effect1 ) return "effect1";
    else if( v == channel_variable_id_t::effect2 ) return "effect2";
    else if( v == channel_variable_id_t::reverb ) return "reverb";
    else if( v == channel_variable_id_t::tremolo ) return "tremolo";
    else if( v == channel_variable_id_t::chorus ) return "chorus";
    else if( v == channel_variable_id_t::celeste ) return "celeste";
    else if( v == channel_variable_id_t::phaser ) return "phaser";
    else if( v == channel_variable_id_t::general_purpose1 ) return "general_purpose1";
    else if( v == channel_variable_id_t::general_purpose2 ) return "general_purpose2";
    else if( v == channel_variable_id_t::general_purpose3 ) return "general_purpose3";
    else if( v == channel_variable_id_t::general_purpose4 ) return "general_purpose4";
    else if( v == channel_variable_id_t::general_purpose5 ) return "general_purpose5";
    else if( v == channel_variable_id_t::general_purpose6 ) return "general_purpose6";
    else if( v == channel_variable_id_t::general_purpose7 ) return "general_purpose7";
    else if( v == channel_variable_id_t::general_purpose8 ) return "general_purpose8";
    else if( v == channel_variable_id_t::hold1 ) return "hold1";
    else if( v == channel_variable_id_t::portamento_switch ) return "portamento_switch";
    else if( v == channel_variable_id_t::sostenuto ) return "sostenuto";
    else if( v == channel_variable_id_t::soft ) return "soft";
    else if( v == channel_variable_id_t::legato ) return "legato";
    else if( v == channel_variable_id_t::hold2 ) return "hold2";
    else if( v == channel_variable_id_t::variation ) return "variation";
    else if( v == channel_variable_id_t::timbre ) return "timbre";
    else if( v == channel_variable_id_t::release ) return "release";
    else if( v == channel_variable_id_t::attack ) return "attack";
    else if( v == channel_variable_id_t::brightness ) return "brightness";
    else if( v == channel_variable_id_t::decay ) return "decay";
    else if( v == channel_variable_id_t::vibrato_rate ) return "vibrato_rate";
    else if( v == channel_variable_id_t::vibrato_depth ) return "vibrato_depth";
    else if( v == channel_variable_id_t::vibrato_delay ) return "vibrato_delay";
    else if( v == channel_variable_id_t::nrpn ) return "nrpn";
    else if( v == channel_variable_id_t::rpn ) return "rpn";
    else if( v == channel_variable_id_t::pitch_bend_sensitivity ) return "pitch_bend_sensitivity";
    else if( v == channel_variable_id_t::master_fine_tune ) return "master_fine_tune";
    else if( v == channel_variable_id_t::master_coarse_tune ) return "master_coarse_tune";
    else if( v == channel_variable_id_t::modulation_depth_range ) return "modulation_depth_range";
    else if( v == channel_variable_id_t::vibrato_rate_gs ) return "vibrato_rate_gs";
    else if( v == channel_variable_id_t::vibrato_depth_gs ) return "vibrato_depth_gs";
    else if( v == channel_variable_id_t::vibrato_delay_gs ) return "vibrato_delay_gs";
    else if( v == channel_variable_id_t::vibrato_rate_xg ) return "vibrato_rate_xg";
    else if( v == channel_variable_id_t::vibrato_depth_xg ) return "vibrato_depth_xg";
    else if( v == channel_variable_id_t::vibrato_delay_xg ) return "vibrato_delay_xg";
    else if( v == channel_variable_id_t::tvf_cutoff_freq ) return "tvf_cutoff_freq";
    else if( v == channel_variable_id_t::tvf_resonance ) return "tvf_resonance";
    else if( v == channel_variable_id_t::hpf_cutoff_freq ) return "hpf_cutoff_freq";
    else if( v == channel_variable_id_t::hpf_resonance ) return "hpf_resonance";
    else if( v == channel_variable_id_t::eq_bass ) return "eq_bass";
    else if( v == channel_variable_id_t::eq_treble ) return "eq_treble";
    else if( v == channel_variable_id_t::eq_mid_bass ) return "eq_mid_bass";
    else if( v == channel_variable_id_t::eq_mid_treble ) return "eq_mid_treble";
    else if( v == channel_variable_id_t::eq_bass_frequency ) return "eq_bass_frequency";
    else if( v == channel_variable_id_t::eq_treble_frequency ) return "eq_treble_frequency";
    else if( v == channel_variable_id_t::eq_mid_bass_frequency ) return "eq_mid_bass_frequency";
    else if( v == channel_variable_id_t::eq_mid_treble_frequency ) return "eq_mid_treble_frequency";
    else if( v == channel_variable_id_t::tvf_tva_envelope_attack_time ) return "tvf_tva_envelope_attack_time";
    else if( v == channel_variable_id_t::tvf_tva_envelope_decay_time ) return "tvf_tva_envelope_decay_time";
    else if( v == channel_variable_id_t::tvf_tva_envelope_release_time ) return "tvf_tva_envelope_release_time";
    else return "unknown";
  }
  channel_state_t::channel_state_t( const global_state_t *gst ) : global_state( gst ), program( 0 ), pitch_bend( 0 ), pressure( 0x7F ) {
    control[ int( channel_variable_id_t::bank ) ] = 0u;
    control[ int( channel_variable_id_t::modulation ) ] = 0u;
    control[ int( channel_variable_id_t::breath ) ] = 0x3FFFu;
    control[ int( channel_variable_id_t::foot ) ] = 0x3FFFu;
    control[ int( channel_variable_id_t::portamento_time ) ] = 0u;
    control[ int( channel_variable_id_t::data_entry ) ] = 0xC000u;
    control[ int( channel_variable_id_t::volume ) ] = 0x2800u;
    control[ int( channel_variable_id_t::balance ) ] = 0u;
    control[ int( channel_variable_id_t::pan ) ] = 0x2000u;
    control[ int( channel_variable_id_t::expression ) ] = 0x3FFFu;
    control[ int( channel_variable_id_t::effect1 ) ] = 0u;
    control[ int( channel_variable_id_t::effect2 ) ] = 0u;
    control[ int( channel_variable_id_t::reverb ) ] = 0u;
    control[ int( channel_variable_id_t::tremolo ) ] = 0u;
    control[ int( channel_variable_id_t::chorus ) ] = 0u;
    control[ int( channel_variable_id_t::celeste ) ] = 0u;
    control[ int( channel_variable_id_t::phaser ) ] = 0u;
    control[ int( channel_variable_id_t::general_purpose1 ) ] = 0u;
    control[ int( channel_variable_id_t::general_purpose2 ) ] = 0u;
    control[ int( channel_variable_id_t::general_purpose3 ) ] = 0u;
    control[ int( channel_variable_id_t::general_purpose4 ) ] = 0u;
    control[ int( channel_variable_id_t::general_purpose5 ) ] = 0u;
    control[ int( channel_variable_id_t::general_purpose6 ) ] = 0u;
    control[ int( channel_variable_id_t::general_purpose7 ) ] = 0u;
    control[ int( channel_variable_id_t::general_purpose8 ) ] = 0u;
    control[ int( channel_variable_id_t::hold1 ) ] = 0u;
    control[ int( channel_variable_id_t::sostenuto ) ] = 0u;
    control[ int( channel_variable_id_t::soft ) ] = 0u;
    control[ int( channel_variable_id_t::legato ) ] = 0x2000u;
    control[ int( channel_variable_id_t::hold2 ) ] = 0u;
    control[ int( channel_variable_id_t::variation ) ] = 0u;
    control[ int( channel_variable_id_t::timbre ) ] = 0x2000u;
    control[ int( channel_variable_id_t::release ) ] = 0x2000u;
    control[ int( channel_variable_id_t::attack ) ] = 0x2000u;
    control[ int( channel_variable_id_t::brightness ) ] = 0x2000u;
    control[ int( channel_variable_id_t::decay ) ] = 0x2000u;
    control[ int( channel_variable_id_t::vibrato_rate ) ] = 0x2000u;
    control[ int( channel_variable_id_t::vibrato_depth ) ] = 0x2000u;
    control[ int( channel_variable_id_t::vibrato_delay ) ] = 0x2000u;
    control[ int( channel_variable_id_t::nrpn ) ] = 0xFFFFu;
    control[ int( channel_variable_id_t::rpn ) ] = 0xFFFFu;
    control[ int( channel_variable_id_t::pitch_bend_sensitivity ) ] = ( 2 << 7 );
    control[ int( channel_variable_id_t::master_fine_tune ) ] = 0x2000u;
    control[ int( channel_variable_id_t::master_coarse_tune ) ] = 0x2000u;
    control[ int( channel_variable_id_t::modulation_depth_range ) ] = 0u;
    control[ int( channel_variable_id_t::vibrato_rate_gs ) ] = 0x2000u;
    control[ int( channel_variable_id_t::vibrato_depth_gs ) ] = 0x2000u;
    control[ int( channel_variable_id_t::vibrato_delay_gs ) ] = 0x2000u;
    control[ int( channel_variable_id_t::vibrato_rate_xg ) ] = 0x2000u;
    control[ int( channel_variable_id_t::vibrato_depth_xg ) ] = 0x2000u;
    control[ int( channel_variable_id_t::vibrato_delay_xg ) ] = 0x2000u;
    control[ int( channel_variable_id_t::tvf_cutoff_freq ) ] = 0x2000u;
    control[ int( channel_variable_id_t::tvf_resonance ) ] = 0x2000u; ///
     control[ int( channel_variable_id_t::hpf_cutoff_freq ) ] = 0x2000u;
     control[ int( channel_variable_id_t::hpf_resonance ) ] = 0x2000u;
     control[ int( channel_variable_id_t::eq_bass ) ] = 0x2000u;
     control[ int( channel_variable_id_t::eq_treble ) ] = 0x2000u;
     control[ int( channel_variable_id_t::eq_mid_bass ) ] = 0x2000u;
     control[ int( channel_variable_id_t::eq_mid_treble ) ] = 0x2000u;
     control[ int( channel_variable_id_t::eq_bass_frequency ) ] = 0x2000u;
     control[ int( channel_variable_id_t::eq_treble_frequency ) ] = 0x2000u;
     control[ int( channel_variable_id_t::eq_mid_bass_frequency ) ] = 0x2000u;
     control[ int( channel_variable_id_t::eq_mid_treble_frequency ) ] = 0x2000u;
    control[ int( channel_variable_id_t::tvf_tva_envelope_attack_time ) ] = 0x2000u;
    control[ int( channel_variable_id_t::tvf_tva_envelope_decay_time ) ] = 0x2000u;
    control[ int( channel_variable_id_t::tvf_tva_envelope_release_time ) ] = 0x2000u;
    std::fill( control.data() + int( channel_variable_id_t::drum_pitch ), control.data() + int( channel_variable_id_t::drum_pitch ) + 128, 0x2000u );
    std::fill( control.data() + int( channel_variable_id_t::drum_tva ), control.data() + int( channel_variable_id_t::drum_tva ) + 128, 0u );
    std::fill( control.data() + int( channel_variable_id_t::drum_pan ), control.data() + int( channel_variable_id_t::drum_pan ) + 128, 0x2000u );
    std::fill( control.data() + int( channel_variable_id_t::drum_reverb ), control.data() + int( channel_variable_id_t::drum_reverb ) + 128, 0u );
    std::fill( control.data() + int( channel_variable_id_t::drum_chorus ), control.data() + int( channel_variable_id_t::drum_chorus ) + 128, 0u );
  }
  nlohmann::json channel_state_t::to_json() const {
    nlohmann::json root = nlohmann::json::object();
    root[ "program" ] = program;
    if( get_pitch_bend() != 0 ) root[ "pitch_bend" ] = get_pitch_bend();
    root[ "volume" ] = get< channel_variable_id_t::volume >();
    if( get< channel_variable_id_t::bank >() != 0 ) root[ "bank" ] = get< channel_variable_id_t::bank >();
    if( get< channel_variable_id_t::modulation >() != 0 ) root[ "modulation" ] = get< channel_variable_id_t::modulation >();
    if( get< channel_variable_id_t::portamento_time >() != 0 ) root[ "portamento_time" ] = get< channel_variable_id_t::portamento_time >();
    if( get< channel_variable_id_t::balance >() != 0 ) root[ "balance" ] = get< channel_variable_id_t::balance >();
    if( get< channel_variable_id_t::pan >() != 0 ) root[ "pan" ] = get< channel_variable_id_t::pan >();
    if( get< channel_variable_id_t::effect1 >() != 0 ) root[ "effect1" ] = get< channel_variable_id_t::effect1 >();
    if( get< channel_variable_id_t::effect2 >() != 0 ) root[ "effect2" ] = get< channel_variable_id_t::effect2 >();
    if( get< channel_variable_id_t::reverb >() != 0 ) root[ "reverb" ] = get< channel_variable_id_t::reverb >();
    if( get< channel_variable_id_t::tremolo >() != 0 ) root[ "tremolo" ] = get< channel_variable_id_t::tremolo >();
    if( get< channel_variable_id_t::chorus >() != 0 ) root[ "chorus" ] = get< channel_variable_id_t::chorus >();
    if( get< channel_variable_id_t::celeste >() != 0 ) root[ "celeste" ] = get< channel_variable_id_t::celeste >();
    if( get< channel_variable_id_t::phaser >() != 0 ) root[ "phaser" ] = get< channel_variable_id_t::phaser >();
    if( get< channel_variable_id_t::general_purpose1 >() != 0 ) root[ "general_purpose1" ] = get< channel_variable_id_t::general_purpose1 >();
    if( get< channel_variable_id_t::general_purpose2 >() != 0 ) root[ "general_purpose2" ] = get< channel_variable_id_t::general_purpose2 >();
    if( get< channel_variable_id_t::general_purpose3 >() != 0 ) root[ "general_purpose3" ] = get< channel_variable_id_t::general_purpose3 >();
    if( get< channel_variable_id_t::general_purpose4 >() != 0 ) root[ "general_purpose4" ] = get< channel_variable_id_t::general_purpose4 >();
    if( get< channel_variable_id_t::general_purpose5 >() != 0 ) root[ "general_purpose5" ] = get< channel_variable_id_t::general_purpose5 >();
    if( get< channel_variable_id_t::general_purpose6 >() != 0 ) root[ "general_purpose6" ] = get< channel_variable_id_t::general_purpose6 >();
    if( get< channel_variable_id_t::general_purpose7 >() != 0 ) root[ "general_purpose7" ] = get< channel_variable_id_t::general_purpose7 >();
    if( get< channel_variable_id_t::general_purpose8 >() != 0 ) root[ "general_purpose8" ] = get< channel_variable_id_t::general_purpose8 >();
    if( get< channel_variable_id_t::legato >() != 0 ) root[ "legato" ] = get< channel_variable_id_t::legato >();
    if( get< channel_variable_id_t::hold2 >() != 0 ) root[ "hold2" ] = get< channel_variable_id_t::hold2 >();
    if( get< channel_variable_id_t::variation >() != 0 ) root[ "variation" ] = get< channel_variable_id_t::variation >();
    if( get< channel_variable_id_t::timbre >() != 0 ) root[ "timbre" ] = get< channel_variable_id_t::timbre >();
    if( get< channel_variable_id_t::release >() != 0 ) root[ "release" ] = get< channel_variable_id_t::release >();
    if( get< channel_variable_id_t::attack >() != 0 ) root[ "attack" ] = get< channel_variable_id_t::attack >();
    if( get< channel_variable_id_t::brightness >() != 0 ) root[ "brightness" ] = get< channel_variable_id_t::brightness >();
    if( get< channel_variable_id_t::decay >() != 0 ) root[ "decay" ] = get< channel_variable_id_t::decay >();
    if( get< channel_variable_id_t::vibrato_rate >() != 0 ) root[ "vibrato_rate" ] = get< channel_variable_id_t::vibrato_rate >();
    if( get< channel_variable_id_t::vibrato_depth >() != 0 ) root[ "vibrato_depth" ] = get< channel_variable_id_t::vibrato_depth >();
    if( get< channel_variable_id_t::vibrato_delay >() != 0 ) root[ "vibrato_delay" ] = get< channel_variable_id_t::vibrato_delay >();
    if( get< channel_variable_id_t::pitch_bend_sensitivity >() != 2 ) root[ "pitch_bend_sensitivity" ] = get< channel_variable_id_t::pitch_bend_sensitivity >();
    if( get< channel_variable_id_t::master_fine_tune >() != 0 ) root[ "master_fine_tune" ] = get< channel_variable_id_t::master_fine_tune >();
    if( get< channel_variable_id_t::modulation_depth_range >() != 0 ) root[ "modulation_depth_range" ] = get< channel_variable_id_t::modulation_depth_range >();
    if( get< channel_variable_id_t::vibrato_rate_gs >() != 0 ) root[ "vibrato_rate_gs" ] = get< channel_variable_id_t::vibrato_rate_gs >();
    if( get< channel_variable_id_t::vibrato_depth_gs >() != 0 ) root[ "vibrato_depth_gs" ] = get< channel_variable_id_t::vibrato_depth_gs >();
    if( get< channel_variable_id_t::vibrato_delay_gs >() != 0 ) root[ "vibrato_delay_gs" ] = get< channel_variable_id_t::vibrato_delay_gs >();
    if( get< channel_variable_id_t::vibrato_rate_xg >() != 0 ) root[ "vibrato_rate_xg" ] = get< channel_variable_id_t::vibrato_rate_xg >();
    if( get< channel_variable_id_t::vibrato_depth_xg >() != 0 ) root[ "vibrato_depth_xg" ] = get< channel_variable_id_t::vibrato_depth_xg >();
    if( get< channel_variable_id_t::vibrato_delay_xg >() != 0 ) root[ "vibrato_delay_xg" ] = get< channel_variable_id_t::vibrato_delay_xg >();
    if( get< channel_variable_id_t::tvf_cutoff_freq >() != 0 ) root[ "tvf_cutoff_freq" ] = get< channel_variable_id_t::tvf_cutoff_freq >();
    if( get< channel_variable_id_t::tvf_resonance >() != 0 ) root[ "tvf_resonance" ] = get< channel_variable_id_t::tvf_resonance >();
     if( get< channel_variable_id_t::hpf_cutoff_freq >() != 0 ) root[ "hpf_cutoff_freq" ] = get< channel_variable_id_t::hpf_cutoff_freq >(); 
     if( get< channel_variable_id_t::hpf_resonance >() != 0 ) root[ "hpf_resonance" ] = get< channel_variable_id_t::hpf_resonance >();
     if( get< channel_variable_id_t::eq_bass >() != 0 ) root[ "eq_bass" ] = get< channel_variable_id_t::eq_bass >();
     if( get< channel_variable_id_t::eq_treble >() != 0 ) root[ "eq_treble" ] = get< channel_variable_id_t::eq_treble >();
     if( get< channel_variable_id_t::eq_mid_bass >() != 0 ) root[ "eq_mid_bass" ] = get< channel_variable_id_t::eq_mid_bass >();
     if( get< channel_variable_id_t::eq_mid_treble >() != 0 ) root[ "eq_mid_treble" ] = get< channel_variable_id_t::eq_mid_treble >();
     if( get< channel_variable_id_t::eq_bass_frequency >() != 0 ) root[ "eq_bass_frequency" ] = get< channel_variable_id_t::eq_bass_frequency >();
     if( get< channel_variable_id_t::eq_treble_frequency >() != 0 ) root[ "eq_treble_frequency" ] = get< channel_variable_id_t::eq_treble_frequency >();
     if( get< channel_variable_id_t::eq_mid_bass_frequency >() != 0 ) root[ "eq_mid_bass_frequency" ] = get< channel_variable_id_t::eq_mid_bass_frequency >();
     if( get< channel_variable_id_t::eq_mid_treble_frequency >() != 0 ) root[ "eq_mid_treble_frequency" ] = get< channel_variable_id_t::eq_mid_treble_frequency >();
    if( get< channel_variable_id_t::tvf_tva_envelope_attack_time >() != 0 ) root[ "tvf_tva_envelope_attack_time" ] = get< channel_variable_id_t::tvf_tva_envelope_attack_time >();
    if( get< channel_variable_id_t::tvf_tva_envelope_decay_time >() != 0 ) root[ "tvf_tva_envelope_decay_time" ] = get< channel_variable_id_t::tvf_tva_envelope_decay_time >();
    if( get< channel_variable_id_t::tvf_tva_envelope_release_time >() != 0 ) root[ "tvf_tva_envelope_release_time" ] = get< channel_variable_id_t::tvf_tva_envelope_release_time >();
    return root;
  }
  float channel_state_t::get_pitch_bend() const {
    return float( pitch_bend ) / 8192.f * get< channel_variable_id_t::pitch_bend_sensitivity >();
  }
}

