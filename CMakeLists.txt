cmake_minimum_required(VERSION 3.13)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
  "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")
PROJECT(wifm)
include(CheckIncludeFiles)
include(CheckCXXSourceCompiles)
enable_testing()

set( ADDITIONAL_COMPILE_FLAGS )
option( ENABLE_ADDRSAN "build with address sanitizer" OFF)
if( ENABLE_ADDRSAN )
  list(APPEND ADDITIONAL_COMPILE_FLAGS "-fsanitize=address" )
  if( CMAKE_CXX_COMPILER_ID STREQUAL "GNU" )
    list(APPEND ADDITIONAL_COMPILE_FLAGS "-static-libasan" )
  endif()
endif()
option( ENABLE_PCOMPSAN "build with pointer compare sanitizer" OFF)
if( ENABLE_PCOMPSAN )
  list(APPEND ADDITIONAL_COMPILE_FLAGS "-fsanitize=pointer-compare" )
endif()
option( ENABLE_PSUBSAN "build with pointer subtract sanitizer" OFF)
if( ENABLE_PSUBSAN )
  list(APPEND ADDITIONAL_COMPILE_FLAGS "-fsanitize=pointer-subtract" )
endif()
option( ENABLE_THREADSAN "build with thread sanitizer" OFF)
if( ENABLE_THREADSAN )
  list(APPEND ADDITIONAL_COMPILE_FLAGS "-fsanitize=thread" )
endif()
option( ENABLE_LEAKSAN "build with leak sanitizer" OFF)
if( ENABLE_LEAKSAN )
  list(APPEND ADDITIONAL_COMPILE_FLAGS "-fsanitize=leak" )
endif()
option( ENABLE_UBSAN "build with undefined behavior sanitizer" OFF)
if( ENABLE_UBSAN )
  list(APPEND ADDITIONAL_COMPILE_FLAGS "-fsanitize=undefined" )
endif()
string(REPLACE ";" " " ADDITIONAL_COMPILE_FLAGS_STR "${ADDITIONAL_COMPILE_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "-g -std=c++2a -Wall -Wextra -Werror ${ADDITIONAL_COMPILE_FLAGS_STR} ${OpenMP_CXX_FLAGS}")
set(CMAKE_C_FLAGS_DEBUG "-g -Wall -Wextra -Werror ${ADDITIONAL_COMPILE_FLAGS_STR} ${OpenMP_C_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE "-march=native -O2 -fforce-addr -fomit-frame-pointer -fstrength-reduce -funroll-loops -ftree-vectorize -std=c++2a -Wall -Wextra -Werror ${ADDITIONAL_COMPILE_FLAGS_STR} ${OpenMP_CXX_FLAGS}")
set(CMAKE_C_FLAGS_RELEASE "-march=native -O2 -fforce-addr -fomit-frame-pointer -fstrength-reduce -funroll-loops -ftree-vectorize -Wall -Wextra -Werror ${ADDITIONAL_COMPILE_FLAGS_STR} ${OpenMP_C_FLAGS}")

find_package(PkgConfig)
set(CMAKE_BUILD_TYPE Release)
set(CMAKE_VERBOSE_MAKEFILE OFF)
find_package(Boost 1.65.0 COMPONENTS program_options system REQUIRED )
option( ENABLE_FFTW3 "Use FFTW3(This version of wifm is licensed under GPL)" OFF)
if( ENABLE_FFTW3 )
pkg_check_modules(FFTW REQUIRED fftw3f)
else()
  find_package( PFFFT REQUIRED )
endif()
pkg_check_modules(SNDFILE REQUIRED sndfile)
find_package(Threads REQUIRED)
find_package(OpenImageIO REQUIRED)
find_package(OpenMP REQUIRED)
find_package(JSON REQUIRED)
#INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR}/include ${Boost_INCLUDE_DIRS}
#  ${FFTW_INCLUDE_DIRS} ${OIIO_INCLUDE_DIR} ${JSON_INCLUDE_DIR}
#  ${SNDFILE_INCLUDE_DIR} )
subdirs( src )


